name: Release to GitHub Pages

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  github-pages-release:
    timeout-minutes: 10

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install pinned nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-08-15
          components: clippy, rustfmt

      - name: Add WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Lint (fmt + clippy)
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

      # If using tailwind, build your CSS before trunk build
      # - name: Build Tailwind CSS
      #   run: |
      #     npm ci
      #     npx tailwindcss -i <INPUT/PATH.css> -o <OUTPUT/PATH.css> --minify

      - name: Install Trunk
        run: |
          wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.4/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
          sudo mv trunk /usr/local/bin/trunk

      - name: Build with Trunk
        # Leading slash in --public-url ensures paths like /REPO_NAME/... for Pages subpath
        run: trunk build --release --public-url "/${GITHUB_REPOSITORY#*/}"

      # Inspect dist before fixing links (helpful diagnostics)
      - name: Inspect dist (pre-fix)
        run: |
          echo "Dist size:"
          du -sh dist || true
          echo "Symlinks in dist:"
          find dist -type l -printf "symlink: %p -> %l\n" || true
          echo "Top-level contents:"
          ls -lah dist || true

      # De-symlink: replace any symlinks in dist with real files/dirs
      - name: De-symlink dist (dereference links)
        shell: bash
        run: |
          set -euo pipefail
          # Find symlinks and replace them with copies of their targets
          mapfile -d '' links < <(find dist -type l -print0 || true)
          if (( ${#links[@]} )); then
            echo "Found ${#links[@]} symlink(s); dereferencing..."
            for link in "${links[@]}"; do
              target="$(readlink -f "$link")"
              rm -f -- "$link"
              if [ -d "$target" ]; then
                mkdir -p -- "$link"
                rsync -a --copy-links "$target"/ "$link"/
              else
                mkdir -p -- "$(dirname "$link")"
                rsync -a --copy-links "$target" "$link"
              fi
            done
          else
            echo "No symlinks found in dist."
          fi

      # Verify no symlinks remain and re-check size
      - name: Inspect dist (post-fix)
        run: |
          echo "Remaining symlinks (should be none):"
          find dist -type l -printf "symlink: %p -> %l\n" || true
          echo "Dist size after fix:"
          du -sh dist || true

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      # Option A: Use generic artifacts v4 (recommended if you also need to re-use artifacts across jobs)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pages-dist
          path: dist
          if-no-files-found: error
          retention-days: 7
          compression-level: 6

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: pages-dist

      # Option B (current approach): keep Pages artifact action
      # - name: Upload artifact (Pages)
      #   uses: actions/upload-pages-artifact@v2
      #   with:
      #     path: './dist'
      #
      # - name: Deploy to GitHub Pages ðŸš€
      #   id: deployment
      #   uses: actions/deploy-pages@v4
